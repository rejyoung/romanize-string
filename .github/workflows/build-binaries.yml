name: Build Cross-Platform Binaries

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  prepare:
    name: Determine release tag
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.settag.outputs.release_tag }}
    steps:
      - name: Resolve tag
        id: settag
        uses: actions/github-script@v7
        with:
          script: |
            const eventName = context.eventName;
            let tag;
            if (eventName === 'release') {
              tag = context.payload.release.tag_name;
            } else {
              const { data } = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              tag = data.tag_name;
            }
            core.setOutput('release_tag', tag);

  build:
    needs: prepare
    # Only build for thai-romanizer releases
    if: startsWith(needs.prepare.outputs.release_tag, '@romanize-string/thai-romanizer@')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x64
          - os: ubuntu-latest
            pyver: '3.11'
            asset_name: thai-linux-x64
            ext: ''
          # Linux arm64 (ARM runners)
          - os: ubuntu-24.04-arm64
            pyver: '3.11'
            asset_name: thai-linux-arm64
            ext: ''
          # Windows x64
          - os: windows-latest
            pyver: '3.11'
            asset_name: thai-win-x64
            ext: '.exe'
          # macOS arm64 (Apple Silicon)
          - os: macos-14
            pyver: '3.11'
            asset_name: thai-mac-arm64
            ext: ''
          # macOS x64 (Intel)
          - os: macos-13
            pyver: '3.11'
            asset_name: thai-mac-x64
            ext: ''
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code at release tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.prepare.outputs.release_tag }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyver }}

      - name: Install dependencies
        working-directory: packages/thai-romanizer/python
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pythainlp

      - name: Build binary
        shell: bash
        working-directory: packages/thai-romanizer/python
        run: |
          # Build from spec (cannot pass --name with a .spec file)
          pyinstaller thai-romanization.spec
          echo "Contents of dist after build:"
          ls -la dist
          # Rename the produced binary to the matrix-provided asset name (portable)
          BUILT_FILE=$(ls -1 dist | head -n 1)
          mv "dist/$BUILT_FILE" "dist/${{ matrix.asset_name }}${{ matrix.ext }}"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: packages/thai-romanizer/python/dist/${{ matrix.asset_name }}${{ matrix.ext }}
          if-no-files-found: error

  release:
    name: Attach binaries to Release
    needs: [build, prepare]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(needs.prepare.outputs.release_tag, '@romanize-string/thai-romanizer@')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate per-file checksums
        run: |
          cd artifacts
          # create a .sha256 file next to each artifact
          find . -type f -maxdepth 2 -print0 | while IFS= read -r -d '' f; do
            sha256sum "$f" | awk '{print $1"  "fname}' fname="$f" > "$f.sha256"
          done
          echo "Generated checksums:" && find . -name '*.sha256' -maxdepth 2 -print

      - name: Upload assets to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.release_tag }}
          files: |
            artifacts/*/*
            artifacts/*/*.sha256