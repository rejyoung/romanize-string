name: Build Cross-Platform Binaries

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag to build for'
        required: true
        type: string

jobs:
  build:
    # Only build when the tag starts with the correct package prefix or the action is manually triggered
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref_name, '@romanize-string/thai-romanizer@')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x64
          - os: ubuntu-latest
            pyver: '3.11'
            asset_name: thai-linux-x64
            ext: ''
          # Linux arm64 (QEMU)
          - os: ubuntu-latest
            pyver: '3.11'
            asset_name: thai-linux-arm64
            ext: ''
          # Windows x64
          - os: windows-latest
            pyver: '3.11'
            asset_name: thai-win-x64
            ext: '.exe'
          # macOS arm64 (Apple Silicon)
          - os: macos-14
            pyver: '3.11'
            asset_name: thai-mac-arm64
            ext: ''
          # macOS x64 (Intel)
          - os: macos-13
            pyver: '3.11'
            asset_name: thai-mac-x64
            ext: ''
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code at release tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Set up Python (host)
        if: matrix.asset_name != 'thai-linux-arm64'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyver }}

      - name: Install dependencies (host)
        if: matrix.asset_name != 'thai-linux-arm64'
        working-directory: packages/thai-romanizer/python
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pythainlp

      - name: Build binary from spec (host)
        if: matrix.asset_name != 'thai-linux-arm64'
        working-directory: packages/thai-romanizer/python
        run: |
          pyinstaller thai-romanization.spec

      - name: Rename artifact (Windows)
        if: runner.os == 'Windows' && matrix.asset_name != 'thai-linux-arm64'
        working-directory: packages/thai-romanizer/python
        run: |
          Write-Host "Contents of dist after build:"; Get-ChildItem dist
          $file = Get-ChildItem -File dist | Select-Object -First 1
          Move-Item -Force $file.FullName "dist\${{ matrix.asset_name }}${{ matrix.ext }}"

      - name: Rename artifact (Non-Windows)
        if: runner.os != 'Windows' && matrix.asset_name != 'thai-linux-arm64'
        shell: bash
        working-directory: packages/thai-romanizer/python
        run: |
          echo "Contents of dist after build:"; ls -la dist
          BUILT_FILE=$(ls -1 dist | head -n 1)
          mv "dist/$BUILT_FILE" "dist/${{ matrix.asset_name }}${{ matrix.ext }}"

      - name: Build arm64 binary in QEMU
        if: matrix.asset_name == 'thai-linux-arm64'
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y python3 python3-pip
            python3 -m pip install --upgrade pip
            pip3 install pyinstaller pythainlp
          run: |
            cd $GITHUB_WORKSPACE/packages/thai-romanizer/python
            pyinstaller thai-romanization.spec
            ls -la dist
            f=$(ls -1 dist | head -n 1)
            mv "dist/$f" "dist/${{ matrix.asset_name }}${{ matrix.ext }}"

  release:
    name: Attach binaries to Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref_name, '@romanize-string/thai-romanizer@')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate per-file checksums
        run: |
          cd artifacts
          # create a .sha256 file next to each artifact
          find . -type f -maxdepth 2 -print0 | while IFS= read -r -d '' f; do
            sha256sum "$f" | awk '{print $1"  "fname}' fname="$f" > "$f.sha256"
          done
          echo "Generated checksums:" && find . -name '*.sha256' -maxdepth 2 -print

      - name: Upload assets to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          overwrite: true
          fail_on_unmatched_files: true
          files: |
            artifacts/*/*